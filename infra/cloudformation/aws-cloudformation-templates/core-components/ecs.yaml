AWSTemplateFormatVersion: 2010-09-09
Description: "CloudFormation template for creating an ECS cluster backed by EC2 instances"
Parameters:
  EnvId:
    Type: String
    Description: Environment Id (used to namespace resources)
    AllowedPattern: "[a-z][a-z0-9]{2,19}"
    ConstraintDescription: Must be lower case letters between 3 and 20 characters.
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: Select a VPC that allows instances to access the Internet.
  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: Subnet ids where private workloads should run. I.e. workloads that should not be accessible via the public internet.

  ## Optional parameters.
  IsDevelopmentGrade:
    Type: String
    Description: "Flag to determine if the setup is for development grade"
    AllowedValues: ["true", "false"]
    Default: "false"

  NumPrivateNodes:
    Type: Number
    Default: "2"
    Description: Number of instances to launch in the private subnet.
  NumPublicNodes:
    Type: Number
    Default: "0"
    Description: Number of instances to launch in the public subnet.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      [
        t2.micro,
        t3.micro,
        t2.small,
        t2.medium,
        t2.large,
        m3.medium,
        m3.large,
        m3.xlarge,
        m3.2xlarge,
        m4.large,
        m4.xlarge,
        m4.2xlarge,
        m4.4xlarge,
        m4.10xlarge,
        c4.large,
        c4.xlarge,
        c4.2xlarge,
        c4.4xlarge,
        c4.8xlarge,
        c3.large,
        c3.xlarge,
        c3.2xlarge,
        c3.4xlarge,
        c3.8xlarge,
        r3.large,
        r3.xlarge,
        r3.2xlarge,
        r3.4xlarge,
        r3.8xlarge,
        i2.xlarge,
        i2.2xlarge,
        i2.4xlarge,
        i2.8xlarge,
      ]
    ConstraintDescription: Please choose a valid instance type.
  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id"

Conditions:
  # These conditions determine whether resources should be created based on the environment type.
  # Development grade environments require less resources and are cheaper. Production grade environments require more 
  # resources and are more expensive. Production grade environments are also more secure because the private subnets are
  # not connected to the internet.
  IsDevelopmentGrade: !Equals [!Ref IsDevelopmentGrade, "true"]
  IsProductionGrade: !Not [!Equals [!Ref IsDevelopmentGrade, "true"]]


Resources:
  SshKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "${EnvId}-ecs-ec2-ssh-key"
      KeyType: ed25519
      Tags:
        - Key: EnvId
          Value: !Ref EnvId

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${EnvId}-cluster"

  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  AutoscalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  EcsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  EcsSecurityGroupInboundFromEcsSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 10
      ToPort: 61000
      SourceSecurityGroupId: !Ref EcsSecurityGroup

    # This rule is only added for development grade environments. It allows inbound ssh access from anywhere.
  EcsSecurityGroupInboundFromAnywhere:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: IsDevelopmentGrade
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref ContainerInstances
        Version: !GetAtt ContainerInstances.LatestVersionNumber
      MinSize: !Ref NumPrivateNodes
      MaxSize: !Ref NumPrivateNodes
      DesiredCapacity: !Ref NumPrivateNodes
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"

  ContainerInstances:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${EnvId}-ecs-launch-template"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        ImageId: !Ref LatestECSOptimizedAMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref SshKeyPair
        SecurityGroupIds:
          - !GetAtt EcsSecurityGroup.GroupId
        UserData: !Base64
          "Fn::Join":
            - ""
            - - |
                #!/bin/bash -xe
              - echo ECS_CLUSTER=
              - !Ref Cluster
              - |2
                >> /etc/ecs/ecs.config
              - |
                echo  ECS_RESERVED_MEMORY=32 >> /etc/ecs/ecs.config
              - |
                sudo fallocate -l 1G /swapfile
              - |
                sudo chmod 600 /swapfile
              - |
                sudo mkswap /swapfile
              - |
                sudo swapon /swapfile
              - |
                echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
              - |
                yum install -y aws-cfn-bootstrap
              - "/opt/aws/bin/cfn-signal -e $? "
              - "         --stack "
              - !Ref "AWS::StackName"
              - "         --resource ECSAutoScalingGroup "
              - "         --region "
              - !Ref "AWS::Region"
              - |+


  CloudMapPrivateServiceDiscovery:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Description: "Private namespace for ECS Service Discovery"
      Name: !Sub "${EnvId}"
      Tags:
        - Key: EnvId
          Value: !Ref EnvId

Outputs:
  Cluster:
    Description: The ECS cluster
    Value: !Ref Cluster

  ClusterArn:
    Description: The ECS cluster Arn
    Value: !GetAtt Cluster.Arn

  EcsSecurityGroupId:
    Description: The ECS security group id
    Value: !Ref EcsSecurityGroup
