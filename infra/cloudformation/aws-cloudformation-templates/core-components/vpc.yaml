---
##
# This template creates a VPC with four subnets in two AZs.
#     The following four subnets are created:
#    - A public subnet in the first AZ: 10.XXX.0.0/20
#    - A private subnet in the first AZ: 10.XXX.16.0/20
#    - B public subnet in the second AZ: 10.XXX.32.0/20
#    - B private subnet in the second AZ: 10.XXX.48.0/20
AWSTemplateFormatVersion: "2010-09-09"
Description: "This template allocates a VPC with a public and private subnet in two AZsterm."
Parameters:
  MigratingGrade:
    Type: String
    Description: "Set this flag to true if migrating from development to production grade, or vice versa. This will disable both production and development resources temporarily."
    AllowedValues: ["true", "false"]
    Default: "false"
  IsDevelopmentGrade:
    Type: String
    Description: "Flag to determine if the setup is for development grade"
    AllowedValues: ["true", "false"]
    Default: "false"
  ClassB:
    Description: "Class B of VPC (10.XXX.0.0/16)"
    Type: Number
    Default: 0
    ConstraintDescription: "Must be in the range [0-255]"
    MinValue: 0
    MaxValue: 255
  EnvId:
    Type: String
    Description: Environment Id (used to namespace resources)
    AllowedPattern: "[a-z][a-z0-9]{2,19}"
    ConstraintDescription: Must be lower case letters between 3 and 20 characters.

Conditions:
  # These conditions determine whether resources should be created based on the environment type.
  # Development grade environments require less resources and are cheaper. Production grade environments require more 
  # resources and are more expensive. Production grade environments are also more secure because the private subnets are
  # not connected to the internet.
  IsDevelopmentGrade: !And
    - !Equals [!Ref MigratingGrade, "false"]
    - !Equals [!Ref IsDevelopmentGrade, "true"]
  IsProductionGrade: !And
    - !Equals [!Ref MigratingGrade, "false"]
    - !Not [!Equals [!Ref IsDevelopmentGrade, "true"]]

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Sub "10.${ClassB}.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "10.${ClassB}.0.0/16"
        - Key: EnvId
          Value: !Ref "EnvId"

  VPCCidrBlock:
    Type: "AWS::EC2::VPCCidrBlock"
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "10.${ClassB}.0.0/16"
        - Key: EnvId
          Value: !Ref "EnvId"

  EgressOnlyInternetGateway:
    Type: "AWS::EC2::EgressOnlyInternetGateway"
    Properties:
      VpcId: !Ref VPC

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetAPublic:
    DependsOn: VPCCidrBlock
    Type: "AWS::EC2::Subnet"
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Sub "10.${ClassB}.0.0/20"
      Ipv6CidrBlock:
        !Select [0, !Cidr [!Select [0, !GetAtt "VPC.Ipv6CidrBlocks"], 4, 64]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "A public"
        - Key: Reach
          Value: public
        - Key: EnvId
          Value: !Ref "EnvId"

  SubnetAPrivate:
    DependsOn: VPCCidrBlock
    Type: "AWS::EC2::Subnet"
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Sub "10.${ClassB}.16.0/20"
      Ipv6CidrBlock:
        !Select [1, !Cidr [!Select [0, !GetAtt "VPC.Ipv6CidrBlocks"], 4, 64]]
      MapPublicIpOnLaunch: !If [IsDevelopmentGrade, true, false]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "A private"
        - Key: Reach
          Value: private
        - Key: EnvId
          Value: !Ref "EnvId"

  SubnetBPublic:
    DependsOn: VPCCidrBlock
    Type: "AWS::EC2::Subnet"
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Sub "10.${ClassB}.32.0/20"
      Ipv6CidrBlock:
        !Select [2, !Cidr [!Select [0, !GetAtt "VPC.Ipv6CidrBlocks"], 4, 64]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "B public"
        - Key: Reach
          Value: public
        - Key: EnvId
          Value: !Ref "EnvId"

  SubnetBPrivate:
    DependsOn: VPCCidrBlock
    Type: "AWS::EC2::Subnet"
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Sub "10.${ClassB}.48.0/20"
      Ipv6CidrBlock:
        !Select [3, !Cidr [!Select [0, !GetAtt "VPC.Ipv6CidrBlocks"], 4, 64]]
      MapPublicIpOnLaunch: !If [IsDevelopmentGrade, true, false]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "B private"
        - Key: Reach
          Value: private
        - Key: EnvId
          Value: !Ref "EnvId"

  RouteTableAPublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "A Public"
        - Key: EnvId
          Value: !Ref "EnvId"

  RouteTableAPrivate:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "A Private"
        - Key: EnvId
          Value: !Ref "EnvId"

  RouteTableBPublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "B Public"
        - Key: EnvId
          Value: !Ref "EnvId"

  RouteTableBPrivate:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "B Private"
        - Key: EnvId
          Value: !Ref "EnvId"

  RouteTableAssociationAPublic:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTableAPublic

  RouteTableAssociationAPrivate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTableAPrivate

  RouteTableAssociationBPublic:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTableBPublic

  RouteTableAssociationBPrivate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTableBPrivate

  RouteTablePublicAInternetRoute:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  RouteTablePublicAInternetRouteIPv6:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref InternetGateway

  RouteTablePublicBInternetRoute:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPublic
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  RouteTablePublicBInternetRouteIPv6:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPublic
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref InternetGateway

  NetworkAclPublic:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
        - Key: EnvId
          Value: !Ref "EnvId"

  NetworkAclPrivate:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private

  SubnetNetworkAclAssociationAPublic:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationAPrivate:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  SubnetNetworkAclAssociationBPublic:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationBPrivate:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  NetworkAclEntryInPublicAllowAll:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"

  NetworkAclEntryInPublicAllowAllIPv6:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: "::/0"

  NetworkAclEntryOutPublicAllowAll:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"

  NetworkAclEntryOutPublicAllowAllIPv6:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: "::/0"

  NetworkAclEntryInPrivateAllowAll:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"

  NetworkAclEntryInPrivateAllowAllIPv6:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: "::/0"

  NetworkAclEntryOutPrivateAllowAll:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"

  NetworkAclEntryOutPrivateAllowAllIPv6:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: "::/0"

#####
## Production Resources
## These resources are only created if the environment is not development grade.
####


  EIPNatGatewayA:
    Type: "AWS::EC2::EIP"
    Condition: IsProductionGrade
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: "AWS::EC2::NatGateway"
    Condition: IsProductionGrade
    Properties:
      AllocationId: !GetAtt "EIPNatGatewayA.AllocationId"
      SubnetId: !Ref SubnetAPublic

  RouteAToNatGateway:
    Type: "AWS::EC2::Route"
    Condition: IsProductionGrade
    Properties:
      RouteTableId: !Ref RouteTableAPrivate
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayA

  EIPNatGatewayB:
    Type: "AWS::EC2::EIP"
    Condition: IsProductionGrade
    Properties:
      Domain: vpc

  NatGatewayB:
    Type: "AWS::EC2::NatGateway"
    Condition: IsProductionGrade
    Properties:
      AllocationId: !GetAtt "EIPNatGatewayB.AllocationId"
      SubnetId: !Ref SubnetBPublic

  RouteBTonatGateway:
    Type: "AWS::EC2::Route"
    Condition: IsProductionGrade
    Properties:
      RouteTableId: !Ref RouteTableBPrivate
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayB

  RouteTablePrivateAInternetRouteIPv6:
    Type: "AWS::EC2::Route"
    Condition: IsProductionGrade
    Properties:
      RouteTableId: !Ref RouteTableAPrivate
      DestinationIpv6CidrBlock: "::/0"
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  RouteTablePrivateBInternetRouteIPv6:
    Type: "AWS::EC2::Route"
    Condition: IsProductionGrade
    Properties:
      RouteTableId: !Ref RouteTableBPrivate
      DestinationIpv6CidrBlock: "::/0"
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway


  ## 
  ## Development Resources
  ## These resources are only created if the environment is development grade.
  ##


## Note: These resources create routes from the "private" subnets to the internet gateway. This is not recommended for production grade environments.
## The resources are only created if the environment is development grade. This allows easy acccess to the private resources for development purposes.
## It's also a lot cheaper because we don't need to create NAT gateways.
  RouteTablePrivateAInternetRoute:
    Type: "AWS::EC2::Route"
    Condition: IsDevelopmentGrade
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPrivate
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  RouteTablePrivateAInternetRouteIPv6:
    Type: "AWS::EC2::Route"
    Condition: IsDevelopmentGrade
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPrivate
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref InternetGateway

  RouteTablePrivateBInternetRoute:
    Type: "AWS::EC2::Route"
    Condition: IsDevelopmentGrade
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPrivate
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  RouteTablePrivateBInternetRouteIPv6:
    Type: "AWS::EC2::Route"
    Condition: IsDevelopmentGrade
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPrivate
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref InternetGateway

Outputs:
  VPC:
    Description: "VPC."
    Value: !Ref VPC
  SubnetAPublic:
    Description: "Subnet A public."
    Value: !Ref SubnetAPublic
  SubnetAPrivate:
    Description: "Subnet A private."
    Value: !Ref SubnetAPrivate
  SubnetBPublic:
    Description: "Subnet B public."
    Value: !Ref SubnetBPublic
  SubnetBPrivate:
    Description: "Subnet B private."
    Value: !Ref SubnetBPrivate
