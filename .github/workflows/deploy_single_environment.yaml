name: Deploy a Single Environment

on:
  workflow_call:
    inputs:
      envId:
        description: "The environment id (e.g., dev, testing, prod)"
        required: true
        default: "dev"
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  deploy_environment:
    name: Deploy Environment
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: main

      - uses: mikefarah/yq@v4.44.3
        with:
          cmd: yq -V

      - name: Read the account id of the Artifact account
        id: read_artifact_account_id
        run: |
          ARTIFACT_ACCOUNT_ID=$(yq eval '.aws_account_id' cd/artifact-account/config.yaml)
          echo "artifact_account_id=$ARTIFACT_ACCOUNT_ID" >> $GITHUB_OUTPUT

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ steps.read_artifact_account_id.outputs.artifact_account_id }}:role/deploy

      - name: Get Release configuration
        id: get_release_config
        run: |
          envId="${{ inputs.envId }}"
          projectId=$(yq e '.[] | .projectName' ./cd/environments.yaml | head -n1)
          echo "projectId=$projectId" >> $GITHUB_OUTPUT

          target_ref=$(yq e '.[] | select(.envId == "'$envId'") | .gitRefName' ./cd/environments.yaml)
          domain_name=$(yq e '.[] | select(.envId == "'$envId'") | .domainName' ./cd/environments.yaml)
          environment_aws_account_id=$(yq e '.[] | select(.envId == "'$envId'") | .awsAccountId' ./cd/environments.yaml)

          release_infra_hash=$(aws ssm get-parameter --name "/build-artifact/${projectId}/infra/$target_ref" --query "Parameter.Value" --output text)
          client_image_tag=$(aws ssm get-parameter --name "/build-artifact/${projectId}/client/$target_ref" --query "Parameter.Value" --output text)
          server_image_tag=$(aws ssm get-parameter --name "/build-artifact/${projectId}/server/$target_ref" --query "Parameter.Value" --output text)

          ARTIFACTS_STACK_NAME="artifact-account-setup-${projectId}"
          infra_bucket_name=$(aws cloudformation describe-stacks \
            --stack-name "$ARTIFACTS_STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='InfraArtifactsBucket'].OutputValue" \
            --output text)

          echo "target_ref=$target_ref" >> $GITHUB_OUTPUT
          echo "domain_name=$domain_name" >> $GITHUB_OUTPUT
          echo "environment_aws_account_id=$environment_aws_account_id" >> $GITHUB_OUTPUT
          echo "release_infra_hash=$release_infra_hash" >> $GITHUB_OUTPUT
          echo "client_image_tag=$client_image_tag" >> $GITHUB_OUTPUT
          echo "server_image_tag=$server_image_tag" >> $GITHUB_OUTPUT
          echo "infra_bucket_name=$infra_bucket_name" >> $GITHUB_OUTPUT

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ steps.get_release_config.outputs.environment_aws_account_id }}:role/deploy

      - name: Apply CloudFormation Template
        run: |
          projectId=$(yq e '.[] | .projectName' ./cd/environments.yaml | head -n1)
          envId="${{ inputs.envId }}"
          envKey="${envId}-${projectId}"
          stack_name="deploy-${envKey}"

          cf_template_file=$(mktemp)
          s3_url="s3://${{ steps.get_release_config.outputs.infra_bucket_name }}/cloudformation/${{ steps.get_release_config.outputs.release_infra_hash }}/deploy_env.yaml"

          echo "Downloading CloudFormation template from $s3_url"
          aws s3 cp "$s3_url" "$cf_template_file"

          echo "Deploying to environment: $envKey in account ${{ steps.get_release_config.outputs.environment_aws_account_id }}"
          aws cloudformation deploy \
            --template-file "$cf_template_file" \
            --parameter-overrides \
              EnvId="${envId}" \
              ProjectId="${projectId}" \
              InfraArtifactsBucket="${{ steps.get_release_config.outputs.infra_bucket_name }}" \
              InfraReleaseHash="${{ steps.get_release_config.outputs.release_infra_hash }}" \
              ClientImageTag="${{ steps.get_release_config.outputs.client_image_tag }}" \
              ServerImageTag="${{ steps.get_release_config.outputs.server_image_tag }}" \
              ReleaseTarget="${{ steps.get_release_config.outputs.target_ref }}" \
              DomainName="${{ steps.get_release_config.outputs.domain_name }}" \
            --stack-name "$stack_name" \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_NAMED_IAM
