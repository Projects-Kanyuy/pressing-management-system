name: Publish Build Artifacts

on:
  workflow_call: {}
  push:
    branches:
      - main
      - "release/*"
    tags:
      - "*"
    paths:
      - ".github/workflows/publish_build_artifacts.yaml"
      - "infra/**"
      - "client/**"
      - "server/**"
  workflow_run:
    workflows:
      - Artifact Account Setup
    types:
      - completed

permissions:
  id-token: write
  contents: read

jobs:
  config:
    name: Read workflow configuration
    runs-on: ubuntu-latest
    outputs:
      artifact_account_id: ${{ steps.read_artifact_account_id.outputs.artifact_account_id }}
      infra_bucket_name: ${{ steps.read_artifact_stack_config.outputs.infra_bucket_name }}
      client_ecr_repo_arn: ${{ steps.read_artifact_stack_config.outputs.client_ecr_repo_arn }}
      server_ecr_repo_arn: ${{ steps.read_artifact_stack_config.outputs.server_ecr_repo_arn }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: mikefarah/yq@v4.44.3
        with:
          cmd: yq -V

      # Read Artifact Account ID
      - name: Read the account id of the Artifact account
        id: read_artifact_account_id
        run: |
          ARTIFACT_ACCOUNT_ID=$(yq eval '.aws_account_id' cd/artifact-account/config.yaml)
          echo "artifact_account_id=$ARTIFACT_ACCOUNT_ID" >> $GITHUB_OUTPUT

      # Assume the OIDC Role to get temporary credentials
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ steps.read_artifact_account_id.outputs.artifact_account_id }}:role/deploy

      # Read project-specific Artifact Stack configuration
      - name: Read Configuration from Artifact Account Stack
        id: read_artifact_stack_config
        env:
          GIT_REPOSITORY_NAME: ${{ github.repository }}
        run: |
          #Reading project id from environments.yaml
          PROJECT_ID=$(yq e '.[] | .projectName' ./cd/environments.yaml | head -n1)
          artifacts_stack_name="artifact-account-setup-${PROJECT_ID}"

          infra_bucket_name=$(aws cloudformation describe-stacks \
            --stack-name "$artifacts_stack_name" \
            --query "Stacks[0].Outputs[?OutputKey=='InfraArtifactsBucket'].OutputValue" \
            --output text)
          
          client_ecr_repo_arn=$(aws cloudformation describe-stacks \
            --stack-name "$artifacts_stack_name" \
            --query "Stacks[0].Outputs[?OutputKey=='ClientEcrRepositoryArn'].OutputValue" \
            --output text)

          server_ecr_repo_arn=$(aws cloudformation describe-stacks \
            --stack-name "$artifacts_stack_name" \
            --query "Stacks[0].Outputs[?OutputKey=='ServerEcrRepositoryArn'].OutputValue" \
            --output text)

          echo "infra_bucket_name=$infra_bucket_name" >> $GITHUB_OUTPUT
          echo "client_ecr_repo_arn=$client_ecr_repo_arn" >> $GITHUB_OUTPUT
          echo "server_ecr_repo_arn=$server_ecr_repo_arn" >> $GITHUB_OUTPUT

  client:
    name: Build and Publish Client Docker Image
    needs: [config]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ needs.config.outputs.artifact_account_id }}:role/deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image and Push to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ref_name=$(echo "$GITHUB_REF_NAME" | tr '/' '-')
          project_id=$(yq e '.[] | .projectName' ./cd/environments.yaml | head -n1)

          commit_hash=$(find ./client/ -type f -exec sha256sum {} + | sort | sha256sum | cut -f 1 -d ' ')
          client_ecr_repo_arn="${{ needs.config.outputs.client_ecr_repo_arn }}"
          client_ecr_repo_name=$(echo "$client_ecr_repo_arn" | cut -d'/' -f2)
          full_image_tag="$ECR_REGISTRY/$client_ecr_repo_name:$commit_hash"

          if [ -z "$(docker manifest inspect "$full_image_tag" 2>/dev/null)" ]; then
            cd client
            make build full_image_tag="$full_image_tag"
            make publish full_image_tag="$full_image_tag"
          else
            echo "✅ Client image already exists, skipping build."
          fi

          aws ssm put-parameter \
            --name "/build-artifact/${project_id}/client/${ref_name}" \
            --value "$full_image_tag" \
            --type "String" \
            --overwrite

  server:
    name: Build and Publish Server Docker Image
    needs: [config]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ needs.config.outputs.artifact_account_id }}:role/deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image and Push to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ref_name=$(echo "$GITHUB_REF_NAME" | tr '/' '-')
          project_id=$(yq e '.[] | .projectName' ./cd/environments.yaml | head -n1)

          commit_hash=$(find ./server/ -type f -exec sha256sum {} + | sort | sha256sum | cut -f 1 -d ' ')
          server_ecr_repo_arn="${{ needs.config.outputs.server_ecr_repo_arn }}"
          server_ecr_repo_name=$(echo "$server_ecr_repo_arn" | cut -d'/' -f2)
          full_image_tag="$ECR_REGISTRY/$server_ecr_repo_name:$commit_hash"

          if [ -z "$(docker manifest inspect "$full_image_tag" 2>/dev/null)" ]; then
            cd server
            make build full_image_tag="$full_image_tag"
            make publish full_image_tag="$full_image_tag"
          else
            echo "✅ Server image already exists, skipping build."
          fi

          aws ssm put-parameter \
            --name "/build-artifact/${project_id}/server/${ref_name}" \
            --value "$full_image_tag" \
            --type "String" \
            --overwrite

  infra:
    name: Publish Infra Artifacts
    needs: [config]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ needs.config.outputs.artifact_account_id }}:role/deploy

      - name: Upload CloudFormation Templates to S3
        env:
          CF_DIR: "cloudformation"
          GIT_REPOSITORY_NAME: ${{ github.repository }}
        run: |
          ref_name=$(echo "$GITHUB_REF_NAME" | tr '/' '-')
          project_id=$(yq e '.[] | .projectName' ./cd/environments.yaml | head -n1)

          commit_hash=$(find ./infra/ -type f -exec sha256sum {} + | sort | sha256sum | cut -f 1 -d ' ')
          bucket_name="${{ needs.config.outputs.infra_bucket_name }}"

          cd infra
          make publish bucket_name="$bucket_name" artifact_hash="$commit_hash" CF_DIR="$CF_DIR"

          aws ssm put-parameter \
            --name "/build-artifact/${project_id}/infra/${ref_name}" \
            --value "$commit_hash" \
            --type "String" \
            --overwrite
